// Generated by gencpp from file sensor/gps_msgs.msg
// DO NOT EDIT!


#ifndef SENSOR_MESSAGE_GPS_MSGS_H
#define SENSOR_MESSAGE_GPS_MSGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sensor
{
template <class ContainerAllocator>
struct gps_msgs_
{
  typedef gps_msgs_<ContainerAllocator> Type;

  gps_msgs_()
    : stamp()
    , longitude(0.0)
    , latitude(0.0)
    , altitude(0.0)
    , UTMx(0.0)
    , UTMy(0.0)
    , var_longitude(0.0)
    , var_latitude(0.0)
    , var_altitude(0.0)
    , var_UTMx(0.0)
    , var_UTMy(0.0)  {
    }
  gps_msgs_(const ContainerAllocator& _alloc)
    : stamp()
    , longitude(0.0)
    , latitude(0.0)
    , altitude(0.0)
    , UTMx(0.0)
    , UTMy(0.0)
    , var_longitude(0.0)
    , var_latitude(0.0)
    , var_altitude(0.0)
    , var_UTMx(0.0)
    , var_UTMy(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef double _UTMx_type;
  _UTMx_type UTMx;

   typedef double _UTMy_type;
  _UTMy_type UTMy;

   typedef double _var_longitude_type;
  _var_longitude_type var_longitude;

   typedef double _var_latitude_type;
  _var_latitude_type var_latitude;

   typedef double _var_altitude_type;
  _var_altitude_type var_altitude;

   typedef double _var_UTMx_type;
  _var_UTMx_type var_UTMx;

   typedef double _var_UTMy_type;
  _var_UTMy_type var_UTMy;





  typedef boost::shared_ptr< ::sensor::gps_msgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor::gps_msgs_<ContainerAllocator> const> ConstPtr;

}; // struct gps_msgs_

typedef ::sensor::gps_msgs_<std::allocator<void> > gps_msgs;

typedef boost::shared_ptr< ::sensor::gps_msgs > gps_msgsPtr;
typedef boost::shared_ptr< ::sensor::gps_msgs const> gps_msgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensor::gps_msgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensor::gps_msgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sensor::gps_msgs_<ContainerAllocator1> & lhs, const ::sensor::gps_msgs_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.longitude == rhs.longitude &&
    lhs.latitude == rhs.latitude &&
    lhs.altitude == rhs.altitude &&
    lhs.UTMx == rhs.UTMx &&
    lhs.UTMy == rhs.UTMy &&
    lhs.var_longitude == rhs.var_longitude &&
    lhs.var_latitude == rhs.var_latitude &&
    lhs.var_altitude == rhs.var_altitude &&
    lhs.var_UTMx == rhs.var_UTMx &&
    lhs.var_UTMy == rhs.var_UTMy;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sensor::gps_msgs_<ContainerAllocator1> & lhs, const ::sensor::gps_msgs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sensor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sensor::gps_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor::gps_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor::gps_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor::gps_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor::gps_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor::gps_msgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensor::gps_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "36f3f8d772df83d6901c751002087a5c";
  }

  static const char* value(const ::sensor::gps_msgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x36f3f8d772df83d6ULL;
  static const uint64_t static_value2 = 0x901c751002087a5cULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor::gps_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor/gps_msgs";
  }

  static const char* value(const ::sensor::gps_msgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensor::gps_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"float64 longitude\n"
"float64 latitude\n"
"float64 altitude\n"
"float64 UTMx\n"
"float64 UTMy\n"
"float64 var_longitude\n"
"float64 var_latitude\n"
"float64 var_altitude\n"
"float64 var_UTMx\n"
"float64 var_UTMy\n"
;
  }

  static const char* value(const ::sensor::gps_msgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensor::gps_msgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.longitude);
      stream.next(m.latitude);
      stream.next(m.altitude);
      stream.next(m.UTMx);
      stream.next(m.UTMy);
      stream.next(m.var_longitude);
      stream.next(m.var_latitude);
      stream.next(m.var_altitude);
      stream.next(m.var_UTMx);
      stream.next(m.var_UTMy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gps_msgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensor::gps_msgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensor::gps_msgs_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "UTMx: ";
    Printer<double>::stream(s, indent + "  ", v.UTMx);
    s << indent << "UTMy: ";
    Printer<double>::stream(s, indent + "  ", v.UTMy);
    s << indent << "var_longitude: ";
    Printer<double>::stream(s, indent + "  ", v.var_longitude);
    s << indent << "var_latitude: ";
    Printer<double>::stream(s, indent + "  ", v.var_latitude);
    s << indent << "var_altitude: ";
    Printer<double>::stream(s, indent + "  ", v.var_altitude);
    s << indent << "var_UTMx: ";
    Printer<double>::stream(s, indent + "  ", v.var_UTMx);
    s << indent << "var_UTMy: ";
    Printer<double>::stream(s, indent + "  ", v.var_UTMy);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSOR_MESSAGE_GPS_MSGS_H
