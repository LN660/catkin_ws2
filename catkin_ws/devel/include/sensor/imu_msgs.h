// Generated by gencpp from file sensor/imu_msgs.msg
// DO NOT EDIT!


#ifndef SENSOR_MESSAGE_IMU_MSGS_H
#define SENSOR_MESSAGE_IMU_MSGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sensor
{
template <class ContainerAllocator>
struct imu_msgs_
{
  typedef imu_msgs_<ContainerAllocator> Type;

  imu_msgs_()
    : stamp()
    , roll(0.0)
    , pitch(0.0)
    , head(0.0)
    , var_roll(0.0)
    , var_pitch(0.0)
    , var_head(0.0)  {
    }
  imu_msgs_(const ContainerAllocator& _alloc)
    : stamp()
    , roll(0.0)
    , pitch(0.0)
    , head(0.0)
    , var_roll(0.0)
    , var_pitch(0.0)
    , var_head(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _head_type;
  _head_type head;

   typedef double _var_roll_type;
  _var_roll_type var_roll;

   typedef double _var_pitch_type;
  _var_pitch_type var_pitch;

   typedef double _var_head_type;
  _var_head_type var_head;





  typedef boost::shared_ptr< ::sensor::imu_msgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor::imu_msgs_<ContainerAllocator> const> ConstPtr;

}; // struct imu_msgs_

typedef ::sensor::imu_msgs_<std::allocator<void> > imu_msgs;

typedef boost::shared_ptr< ::sensor::imu_msgs > imu_msgsPtr;
typedef boost::shared_ptr< ::sensor::imu_msgs const> imu_msgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensor::imu_msgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensor::imu_msgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sensor::imu_msgs_<ContainerAllocator1> & lhs, const ::sensor::imu_msgs_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.head == rhs.head &&
    lhs.var_roll == rhs.var_roll &&
    lhs.var_pitch == rhs.var_pitch &&
    lhs.var_head == rhs.var_head;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sensor::imu_msgs_<ContainerAllocator1> & lhs, const ::sensor::imu_msgs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sensor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sensor::imu_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor::imu_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor::imu_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor::imu_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor::imu_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor::imu_msgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensor::imu_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5ebb085607169f8db0078a888ed031ff";
  }

  static const char* value(const ::sensor::imu_msgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5ebb085607169f8dULL;
  static const uint64_t static_value2 = 0xb0078a888ed031ffULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor::imu_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor/imu_msgs";
  }

  static const char* value(const ::sensor::imu_msgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensor::imu_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"float64 roll\n"
"float64 pitch \n"
"float64 head\n"
"float64 var_roll\n"
"float64 var_pitch \n"
"float64 var_head\n"
;
  }

  static const char* value(const ::sensor::imu_msgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensor::imu_msgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.head);
      stream.next(m.var_roll);
      stream.next(m.var_pitch);
      stream.next(m.var_head);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct imu_msgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensor::imu_msgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensor::imu_msgs_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "head: ";
    Printer<double>::stream(s, indent + "  ", v.head);
    s << indent << "var_roll: ";
    Printer<double>::stream(s, indent + "  ", v.var_roll);
    s << indent << "var_pitch: ";
    Printer<double>::stream(s, indent + "  ", v.var_pitch);
    s << indent << "var_head: ";
    Printer<double>::stream(s, indent + "  ", v.var_head);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSOR_MESSAGE_IMU_MSGS_H
